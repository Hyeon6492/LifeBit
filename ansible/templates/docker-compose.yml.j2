version: '3.8'

networks:
  lifebit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  airflow_data:
    driver: local

services:
  # ================================================
  # 데이터베이스 (PostgreSQL) - 메모리 제한 완화
  # ================================================
  postgres-db:
    image: postgres:14-alpine
    container_name: lifebit-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: {{ POSTGRES_DB }}
      POSTGRES_USER: {{ POSTGRES_USER }}
      POSTGRES_PASSWORD: {{ POSTGRES_PASSWORD }}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      lifebit-network:
        ipv4_address: 172.20.0.10
    deploy:
      resources:
        limits:
          memory: 800M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{ POSTGRES_USER }} -d {{ POSTGRES_DB }}"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # ================================================
  # 캐시 (Redis) - 메모리 제한 완화
  # ================================================
  redis-cache:
    image: redis:7-alpine
    container_name: lifebit-redis
    restart: unless-stopped
    command: redis-server --requirepass {{ REDIS_PASSWORD }} --maxmemory 400mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      lifebit-network:
        ipv4_address: 172.20.0.11
    deploy:
      resources:
        limits:
          memory: 400M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "{{ REDIS_PASSWORD }}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================================
  # 백엔드 API (Spring Boot) - 메모리 제한 완화
  # ================================================
  spring-app:
    build:
      context: ./apps/core-api-spring
      dockerfile: Dockerfile
    container_name: lifebit-spring-api
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_NAME={{ POSTGRES_DB }}
      - DB_USER={{ POSTGRES_USER }}
      - DB_PASSWORD={{ POSTGRES_PASSWORD }}
      - REDIS_HOST=redis-cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD={{ REDIS_PASSWORD }}
      - JWT_SECRET={{ JWT_SECRET }}
      - JAVA_OPTS=-Xmx800m -Xms256m
    ports:
      - "8080:8080"
    networks:
      lifebit-network:
        ipv4_address: 172.20.0.20
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 45s
      timeout: 15s
      retries: 8
      start_period: 120s

  # ================================================
  # AI API (FastAPI) - 메모리 제한 완화
  # ================================================
  fastapi-app:
    build:
      context: ./apps/ai-api-fastapi
      dockerfile: Dockerfile
    container_name: lifebit-fastapi
    restart: unless-stopped
    environment:
      - OPENAI_API_KEY={{ OPENAI_API_KEY }}
      - USE_GPT={{ USE_GPT }}
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_NAME={{ POSTGRES_DB }}
      - DB_USER={{ POSTGRES_USER }}
      - DB_PASSWORD={{ POSTGRES_PASSWORD }}
      - REDIS_HOST=redis-cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD={{ REDIS_PASSWORD }}
      - JWT_SECRET_KEY={{ JWT_SECRET_KEY }}
      - JWT_ALGORITHM={{ JWT_ALGORITHM }}
      - CORS_ORIGINS={{ CORS_ORIGINS }}
      - LOG_LEVEL={{ LOG_LEVEL }}
    ports:
      - "8001:8001"
    networks:
      lifebit-network:
        ipv4_address: 172.20.0.21
    deploy:
      resources:
        limits:
          memory: 800M
        reservations:
          memory: 200M
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/py/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ================================================
  # 프론트엔드 (React + Vite) - 메모리 최적화
  # ================================================
  frontend-app:
    build:
      context: .
      dockerfile: ./apps/frontend-vite/Dockerfile
      args:
        - VITE_KAKAO_CLIENT_ID={{ KAKAO_CLIENT_ID }}
        - VITE_GOOGLE_CLIENT_ID={{ GOOGLE_CLIENT_ID }}
    container_name: lifebit-frontend
    restart: unless-stopped
    environment:
      - VITE_CORE_API_URL=http://{{ ansible_default_ipv4.address }}:8082/api
      - VITE_AI_API_URL=http://{{ ansible_default_ipv4.address }}:8082/ai
    ports:
      - "3000:80"
    networks:
      lifebit-network:
        ipv4_address: 172.20.0.30
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    depends_on:
      - spring-app
      - fastapi-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================================
  # 웹 프록시 (Nginx) - 수정된 버전
  # ================================================
  nginx-proxy:
    build:
      context: .
      dockerfile: nginx-dockerfile
    container_name: lifebit-nginx
    restart: unless-stopped
    ports:
      - "8082:80"
    networks:
      lifebit-network:
        ipv4_address: 172.20.0.50
    depends_on:
      - frontend-app
      - spring-app
      - fastapi-app
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # ================================================
  # 워크플로우 (Airflow) - 경량화
  # ================================================
  airflow-webserver:
    image: apache/airflow:2.7.0-python3.10
    container_name: lifebit-airflow
    restart: unless-stopped
    command: >
      bash -c "airflow db upgrade &&
               airflow users create --username {{ AIRFLOW_ADMIN_USER }} --password {{ AIRFLOW_ADMIN_PASSWORD }} --firstname Admin --lastname User --role Admin --email admin@example.com &&
               airflow webserver"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://{{ POSTGRES_USER }}:{{ POSTGRES_PASSWORD }}@postgres-db:5432/{{ POSTGRES_DB }}
      - AIRFLOW__CORE__FERNET_KEY={{ AIRFLOW_FERNET_KEY }}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
    volumes:
      - airflow_data:/opt/airflow
    ports:
      - "8081:8080"
    networks:
      lifebit-network:
        ipv4_address: 172.20.0.40
    deploy:
      resources:
        limits:
          memory: 600M
        reservations:
          memory: 200M
    depends_on:
      postgres-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 15s
      retries: 5
      start_period: 180s

  # ================================================
  # 모니터링 (Prometheus) - 경량화
  # ================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: lifebit-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.retention.size=1GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      lifebit-network:
        ipv4_address: 172.20.0.60
    deploy:
      resources:
        limits:
          memory: 400M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================================
  # 대시보드 (Grafana) - 경량화
  # ================================================
  grafana:
    image: grafana/grafana:latest
    container_name: lifebit-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER={{ GRAFANA_ADMIN_USER }}
      - GF_SECURITY_ADMIN_PASSWORD={{ GRAFANA_ADMIN_PASSWORD }}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      lifebit-network:
        ipv4_address: 172.20.0.61
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 100M
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================================
  # 시스템 모니터링 (Node Exporter) - 안전한 설정
  # ================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: lifebit-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
    ports:
      - "9100:9100"
    networks:
      lifebit-network:
        ipv4_address: 172.20.0.70
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s 