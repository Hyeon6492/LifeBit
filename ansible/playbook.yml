---
# ================================================
# LifeBit 학원용 Ansible 배포 플레이북
# ================================================
# 단일 서버에 Docker Compose로 모든 서비스 배포

- name: LifeBit 완전 자동화 배포
  hosts: all
  become: yes
  vars:
    project_name: "lifebit"
    git_repo: "{{ git_repository_url | default('https://github.com/Hyeon6492/LifeBit.git') }}"
    
  tasks:
    # ================================================
    # 0. 방화벽 설정 (최우선 실행)
    # ================================================
    - name: UFW 초기화
      ufw:
        state: reset
      tags: [security]

    - name: UFW 기본 정책 설정
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      loop:
        - { direction: 'incoming', policy: 'deny' }
        - { direction: 'outgoing', policy: 'allow' }
      tags: [security]

    - name: UFW 포트 허용
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto | default('tcp') }}"
        comment: "{{ item.comment }}"
      loop:
        - { port: '22', comment: 'SSH' }
        - { port: '80', comment: 'HTTP' }
        - { port: '443', comment: 'HTTPS' }
        - { port: '3000', comment: 'Frontend' }
        - { port: '8080', comment: 'Spring Boot API' }
        - { port: '8001', comment: 'FastAPI' }
        - { port: '8081', comment: 'Airflow' }
        - { port: '8082', comment: 'Nginx Proxy' }
        - { port: '3001', comment: 'Grafana' }
        - { port: '9090', comment: 'Prometheus' }
        - { port: '9100', comment: 'Node Exporter' }
      tags: [security]

    - name: UFW 활성화
      ufw:
        state: enabled
      tags: [security]

    # ================================================
    # 1. 시스템 기본 설정
    # ================================================
    - name: apt 잠금이 해제될 때까지 대기
      ansible.builtin.shell: |
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo 'apt 잠금 대기 중...'
          sleep 10
        done
      changed_when: false
      tags: [system]

    - name: 시스템 패키지 업데이트
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600
      tags: [system]

    - name: 필수 패키지 설치
      apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - unzip
          - zip
          - jq
          - tree
          - net-tools
          - ufw
          - fail2ban
          - logrotate
          - cron
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - bc
          - netcat
          - python3
          - python3-pip
          - python3-dev
          - python3-setuptools
        state: present
      tags: [system]

    # ================================================
    # 2. Docker 설치
    # ================================================
    - name: Docker GPG 키 추가
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      tags: [docker]

    - name: Docker 저장소 추가
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      tags: [docker]

    - name: Docker 설치
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes
      tags: [docker]

    - name: Docker 서비스 시작 및 활성화
      systemd:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    - name: Docker Compose 설치
      get_url:
        url: "https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      tags: [docker]

    - name: Docker 사용자 그룹 설정
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop:
        - root
        - ubuntu
      ignore_errors: yes
      tags: [docker]

    - name: Docker SDK(Python) 및 Compose 라이브러리 설치
      pip:
        name:
          - docker  # docker SDK만 설치하여 docker-compose v1이 설치되지 않도록 함
        state: present
        executable: pip3
      tags: [docker]

    # ================================================
    # 4. SSH 키 인증 설정 (Ubuntu 24.04 cloud-init 대응)
    # ================================================
    - name: SSH 키 인증 활성화 (cloud-init 무시)
      lineinfile:
        path: /etc/ssh/sshd_config.d/50-cloud-init.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        create: yes
        backup: yes
      loop:
        - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
        - { regexp: '^UsePAM', line: 'UsePAM no' }
        - { regexp: '^PermitRootLogin', line: 'PermitRootLogin prohibit-password' }
      notify: restart ssh
      tags: [security, ssh]

    - name: SSH 키 인증 활성화 (기본 설정)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin prohibit-password' }
      notify: restart ssh
      tags: [security, ssh]

    - name: root 사용자 .ssh 디렉토리 확인
      file:
        path: /root/.ssh
        state: directory
        owner: root
        group: root
        mode: '0700'
      tags: [security, ssh]

    - name: authorized_keys 파일 권한 설정
      file:
        path: /root/.ssh/authorized_keys
        owner: root
        group: root
        mode: '0600'
      ignore_errors: yes
      tags: [security, ssh]

    # ================================================
    # 5. Fail2Ban 설정
    # ================================================
    - name: Fail2Ban 설정 파일 생성
      copy:
        content: |
          [DEFAULT]
          bantime = 3600
          findtime = 600
          maxretry = 5
          backend = systemd

          [sshd]
          enabled = true
          port = ssh
          logpath = %(sshd_log)s
          backend = %(sshd_backend)s

          [nginx-http-auth]
          enabled = true
          port = http,https
          logpath = /var/log/nginx/error.log
        dest: /etc/fail2ban/jail.local
        backup: yes
      tags: [security]

    - name: Fail2Ban 서비스 시작
      systemd:
        name: fail2ban
        state: started
        enabled: yes
      tags: [security]

    # ================================================
    # 6. 애플리케이션 소스 코드 배포
    # ================================================
    - name: 원격 서버에 프로젝트 디렉토리 생성
      file:
        path: "/opt/{{ project_name }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'
      tags: [deploy]

    - name: 로컬 프로젝트 파일을 원격 서버로 동기화 (rsync)
      synchronize:
        src: ../../
        dest: "/opt/{{ project_name }}"
        archive: yes
        checksum: yes
        delete: yes
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=.idea"
          - "--exclude=.vscode"
          - "--exclude=.deploy_checkpoints"
          - "--exclude=logs/"
          - "--exclude=*.log"
          - "--exclude='*~'"
          - "--exclude='*.swp'"
          - "--exclude=target/"
          - "--exclude=apps/ai-api-fastapi/venv/"
          - "--exclude=apps/frontend-vite/node_modules/"
          - "--exclude=apps/frontend-vite/dist/"
      tags: [deploy]

    # ================================================
    # 7. 설정 파일 템플릿 적용
    # ================================================
    - name: .env 파일 생성
      template:
        src: templates/env.j2
        dest: "/opt/{{ project_name }}/.env"
      tags: [deploy]

    - name: docker-compose.yml 파일 생성
      template:
        src: templates/docker-compose.yml.j2
        dest: "/opt/{{ project_name }}/docker-compose.yml"
      tags: [deploy]

    # ================================================
    # 8. Docker 이미지 순차 빌드 및 실행 (메모리 최적화)
    # ================================================

    - name: Docker 베이스 이미지 다운로드 (pull)
      shell: |
        set -e
        cd /opt/{{ project_name }}
        echo "--- 베이스 이미지를 다운로드합니다(pull) ---"
        docker-compose pull
      args:
        chdir: "/opt/{{ project_name }}"
      tags: [deploy]

    - name: "1단계: Spring Boot 이미지 빌드"
      shell: |
        set -e
        cd /opt/{{ project_name }}
        echo "--- Spring 이미지 빌드 ---"
        docker-compose build --no-cache spring-app
      args:
        chdir: "/opt/{{ project_name }}"
      tags: [deploy]

    - name: Docker 캐시 정리 (Spring 빌드 후)
      shell: "docker system prune -f"
      tags: [deploy]

    - name: "2단계: FastAPI 이미지 빌드"
      shell: |
        set -e
        cd /opt/{{ project_name }}
        echo "--- FastAPI 이미지 빌드 ---"
        docker-compose build --no-cache fastapi-app
      args:
        chdir: "/opt/{{ project_name }}"
      tags: [deploy]

    - name: Docker 캐시 정리 (FastAPI 빌드 후)
      shell: "docker system prune -f"
      tags: [deploy]

    - name: "3단계: Frontend 이미지 빌드 (옵션)"
      shell: |
        set -e
        cd /opt/{{ project_name }}
        echo "--- Frontend 이미지 빌드 ---"
        docker-compose build --no-cache frontend-app || true  # 메모리 부족 시 무시
      args:
        chdir: "/opt/{{ project_name }}"
      tags: [deploy]

    - name: Docker 캐시 정리 (Frontend 빌드 후)
      shell: "docker system prune -f"
      tags: [deploy]

    - name: "4단계: Nginx Proxy 이미지 빌드 (옵션)"
      shell: |
        set -e
        cd /opt/{{ project_name }}
        echo "--- Nginx 이미지 빌드 ---"
        docker-compose build --no-cache nginx-proxy || true
      args:
        chdir: "/opt/{{ project_name }}"
      tags: [deploy]

    - name: Docker 캐시 최종 정리
      shell: "docker system prune -f"
      tags: [deploy]

    - name: Docker Compose로 컨테이너 실행 (이미지 빌드 없이)
      shell: |
        set -e
        cd /opt/{{ project_name }}
        echo "--- 컨테이너 실행 ---"
        docker-compose up -d --remove-orphans
        echo "--- 컨테이너 상태 ---"
        docker-compose ps
      args:
        chdir: "/opt/{{ project_name }}"
      register: docker_compose_result
      failed_when: docker_compose_result.rc != 0
      tags: [deploy]

    - name: Docker Compose 상태 출력
      debug:
        var: docker_compose_result.stdout_lines
      tags: [deploy]

    # ================================================
    # 9-1. PostgreSQL DB 초기화 (LifeBit.sql 적용)
    # ================================================
    - name: PostgreSQL 컨테이너가 준비될 때까지 대기
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 5432
        timeout: 60
      tags: [database]

    - name: LifeBit.sql 파일을 서버로 복사
      copy:
        src: "{{ playbook_dir }}/../LifeBit.sql"
        dest: "/opt/{{ project_name }}/LifeBit.sql"
        mode: '0644'
      tags: [database]

    - name: PostgreSQL DB 초기화 (LifeBit.sql 실행)
      shell: |
        cd /opt/{{ project_name }}
        docker-compose exec -T postgres-db psql -U {{ postgres_user | default('lifebit_user') }} -d {{ postgres_db | default('lifebit_db') }} < /opt/{{ project_name }}/LifeBit.sql
      args:
        chdir: "/opt/{{ project_name }}"
      register: db_init_result
      failed_when: db_init_result.rc != 0
      tags: [database]

    - name: DB 초기화 결과 출력
      debug:
        var: db_init_result.stdout_lines
      tags: [database]

    # ================================================
    # 11. 헬스체크 스크립트 생성 (개선된 버전)
    # ================================================
    - name: "헬스체크 스크립트 배포 (템플릿)"
      template:
        src: "healthcheck.sh.j2"
        dest: "/opt/{{ project_name }}/health-check.sh"
        mode: '0755'
      tags: [monitoring]

    # ================================================
    # 12. Cron 작업 설정 (개선된 버전)
    # ================================================
    - name: Cron 작업 설정 (개선된 버전)
      cron:
        name: "{{ item.name }}"
        minute: "{{ item.minute }}"
        hour: "{{ item.hour | default('*') }}"
        job: "{{ item.job }}"
      loop:
        - name: "LifeBit 헬스체크"
          minute: "*/5"
          job: "/opt/{{ project_name }}/health-check.sh > /dev/null 2>&1"
        - name: "데이터베이스 백업"
          minute: "0"
          hour: "3"
          job: "cd /opt/{{ project_name }} && docker-compose exec -T postgres-db pg_dump -U {{ postgres_user | default('lifebit_user') }} {{ postgres_db | default('lifebit_db') }} > /opt/{{ project_name }}/backups/db_backup_$(date +%Y%m%d_%H%M%S).sql"
        - name: "Docker 정리"
          minute: "0"
          hour: "2"
          job: "docker system prune -f > /dev/null 2>&1"
        - name: "로그 정리"
          minute: "0"
          hour: "4"
          job: "find /opt/{{ project_name }}/logs -name '*.log' -mtime +7 -delete > /dev/null 2>&1"
      tags: [monitoring]

    # ================================================
    # 13. 로그 로테이션 설정
    # ================================================
    - name: 로그 로테이션 설정
      copy:
        content: |
          /opt/{{ project_name }}/logs/*.log {
              daily
              missingok
              rotate 30
              compress
              delaycompress
              notifempty
              create 644 root root
              postrotate
                  systemctl reload docker || true
              endscript
          }
        dest: /etc/logrotate.d/lifebit
      tags: [system]

    # ================================================
    # 14. 시스템 정보 수집
    # ================================================
    - name: 시스템 정보 파일 생성
      copy:
        content: |
          === LifeBit 서버 정보 ===
          배포 완료 시간: {{ ansible_date_time.iso8601 }}
          환경: {{ deploy_env }}
          프로젝트: {{ project_name }}
          
          === 시스템 정보 ===
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Kernel: {{ ansible_kernel }}
          CPU: {{ ansible_processor_vcpus }} cores
          Memory: {{ ansible_memtotal_mb }} MB
          
          === 네트워크 정보 ===
          Public IP: {{ ansible_default_ipv4.address }}
          
          === 서비스 포트 ===
          - Frontend: 3000
          - Spring Boot API: 8080
          - FastAPI: 8001
          - Airflow: 8081
          - Nginx Proxy: 8082
          - Grafana: 3001
          - Prometheus: 9090
          - Node Exporter: 9100
        dest: "/opt/{{ project_name }}/system-info.txt"
      tags: [info]

    # ================================================
    # 15. 배포 완료 알림
    # ================================================
    - name: 배포 완료 표시
      file:
        path: "/opt/{{ project_name }}/deployment-complete"
        state: touch
        mode: '0644'
      tags: [deploy]

    - name: 배포 완료 메시지 출력
      debug:
        msg: |
          🎉 LifeBit 배포 완료!
          
          📱 서비스 URLs:
          - 통합 접속 (Nginx): http://{{ ansible_default_ipv4.address }}:8082
          - Frontend: http://{{ ansible_default_ipv4.address }}:3000
          - Spring Boot API: http://{{ ansible_default_ipv4.address }}:8080
          - FastAPI: http://{{ ansible_default_ipv4.address }}:8001
          - Grafana: http://{{ ansible_default_ipv4.address }}:3001
          - Prometheus: http://{{ ansible_default_ipv4.address }}:9090
          
          🔑 SSH 접속:
          ssh -i ~/.ssh/lifebit-{{ deploy_env }}-key.pem ubuntu@{{ ansible_default_ipv4.address }}
      tags: [info]

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
    
    - name: restart ssh
      systemd:
        name: ssh
        state: restarted 