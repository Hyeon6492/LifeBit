---
# ================================================
# LifeBit 학원용 Ansible 배포 플레이북
# ================================================
# 단일 서버에 Docker Compose로 모든 서비스 배포

- name: LifeBit 완전 자동화 배포
  hosts: all
  become: yes
  vars:
    project_name: "lifebit"
    environment: "{{ env | default('demo') }}"
    git_repo: "{{ git_repository_url | default('https://github.com/your-repo/LifeBit.git') }}"
    git_branch: "{{ git_branch | default('main') }}"
    
  tasks:
    # ================================================
    # 1. 시스템 기본 설정
    # ================================================
    - name: 시스템 패키지 업데이트
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600
      tags: [system]

    - name: 필수 패키지 설치
      apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - unzip
          - zip
          - jq
          - tree
          - net-tools
          - ufw
          - fail2ban
          - logrotate
          - cron
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: present
      tags: [system]

    # ================================================
    # 2. Docker 설치
    # ================================================
    - name: Docker GPG 키 추가
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      tags: [docker]

    - name: Docker 저장소 추가
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      tags: [docker]

    - name: Docker 설치
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes
      tags: [docker]

    - name: Docker 서비스 시작 및 활성화
      systemd:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    - name: Docker Compose 설치
      get_url:
        url: "https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      tags: [docker]

    - name: Docker 사용자 그룹 설정
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop:
        - root
        - ubuntu
      ignore_errors: yes
      tags: [docker]

    - name: Docker SDK(Python) 및 Compose 라이브러리 설치
      pip:
        name:
          - docker
          - docker-compose
        state: present
      tags: [docker]

    # ================================================
    # 3. 방화벽 설정
    # ================================================
    - name: UFW 초기화
      ufw:
        state: reset
      tags: [security]

    - name: UFW 기본 정책 설정
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      loop:
        - { direction: 'incoming', policy: 'deny' }
        - { direction: 'outgoing', policy: 'allow' }
      tags: [security]

    - name: UFW 포트 허용
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto | default('tcp') }}"
        comment: "{{ item.comment }}"
      loop:
        - { port: '22', comment: 'SSH' }
        - { port: '80', comment: 'HTTP' }
        - { port: '443', comment: 'HTTPS' }
        - { port: '3000', comment: 'Frontend' }
        - { port: '8080', comment: 'Spring Boot API' }
        - { port: '8001', comment: 'FastAPI' }
        - { port: '8081', comment: 'Airflow' }
        - { port: '8082', comment: 'Nginx Proxy' }
        - { port: '3001', comment: 'Grafana' }
        - { port: '9090', comment: 'Prometheus' }
        - { port: '9100', comment: 'Node Exporter' }
      tags: [security]

    - name: UFW 활성화
      ufw:
        state: enabled
      tags: [security]

    # ================================================
    # 4. SSH 키 인증 설정 (Ubuntu 24.04 cloud-init 대응)
    # ================================================
    - name: SSH 키 인증 활성화 (cloud-init 무시)
      lineinfile:
        path: /etc/ssh/sshd_config.d/50-cloud-init.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        create: yes
        backup: yes
      loop:
        - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
        - { regexp: '^UsePAM', line: 'UsePAM no' }
        - { regexp: '^PermitRootLogin', line: 'PermitRootLogin prohibit-password' }
      notify: restart ssh
      tags: [security, ssh]

    - name: SSH 키 인증 활성화 (기본 설정)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin prohibit-password' }
      notify: restart ssh
      tags: [security, ssh]

    - name: root 사용자 .ssh 디렉토리 확인
      file:
        path: /root/.ssh
        state: directory
        owner: root
        group: root
        mode: '0700'
      tags: [security, ssh]

    - name: authorized_keys 파일 권한 설정
      file:
        path: /root/.ssh/authorized_keys
        owner: root
        group: root
        mode: '0600'
      ignore_errors: yes
      tags: [security, ssh]

    # ================================================
    # 5. Fail2Ban 설정
    # ================================================
    - name: Fail2Ban 설정 파일 생성
      copy:
        content: |
          [DEFAULT]
          bantime = 3600
          findtime = 600
          maxretry = 5
          backend = systemd

          [sshd]
          enabled = true
          port = ssh
          logpath = %(sshd_log)s
          backend = %(sshd_backend)s

          [nginx-http-auth]
          enabled = true
          port = http,https
          logpath = /var/log/nginx/error.log
        dest: /etc/fail2ban/jail.local
        backup: yes
      tags: [security]

    - name: Fail2Ban 서비스 시작
      systemd:
        name: fail2ban
        state: started
        enabled: yes
      tags: [security]

    # ================================================
    # 5. 프로젝트 디렉토리 설정
    # ================================================
    - name: 프로젝트 디렉토리 생성
      file:
        path: "/opt/{{ project_name }}/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - ""
        - "logs"
        - "backups"
        - "ssl"
        - "data"
      tags: [project]

    # ================================================
    # 6. Git 저장소 클론
    # ================================================
    - name: 기존 프로젝트 디렉토리 정리
      file:
        path: "/opt/{{ project_name }}/app"
        state: absent
      tags: [deploy]

    - name: Git 저장소 클론
      git:
        repo: "{{ git_repo }}"
        dest: "/opt/{{ project_name }}/app"
        version: "{{ git_branch }}"
        force: yes
      tags: [deploy]

    # ================================================
    # 7. 환경 설정 파일 생성
    # ================================================
    - name: 환경 설정 파일 생성
      template:
        src: "{{ item.src }}"
        dest: "/opt/{{ project_name }}/app/{{ item.dest }}"
        mode: '0644'
      loop:
        - { src: 'docker-compose.yml.j2', dest: 'docker-compose.yml' }
        - { src: 'env.j2', dest: '.env' }
      tags: [config]

    # ================================================
    # 8. 모니터링 도구 설치
    # ================================================
    - name: Node Exporter 다운로드 및 설치
      unarchive:
        src: "https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz"
        dest: /tmp
        remote_src: yes
        creates: /tmp/node_exporter-1.7.0.linux-amd64
      tags: [monitoring]

    - name: Node Exporter 바이너리 복사
      copy:
        src: /tmp/node_exporter-1.7.0.linux-amd64/node_exporter
        dest: /usr/local/bin/node_exporter
        mode: '0755'
        remote_src: yes
      tags: [monitoring]

    - name: Node Exporter 서비스 파일 생성
      copy:
        content: |
          [Unit]
          Description=Node Exporter
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=nobody
          Group=nogroup
          Type=simple
          ExecStart=/usr/local/bin/node_exporter --web.listen-address=:9100
          Restart=always

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/node_exporter.service
      tags: [monitoring]

    - name: Node Exporter 서비스 시작
      systemd:
        name: node_exporter
        state: started
        enabled: yes
        daemon_reload: yes
      tags: [monitoring]

    # ================================================
    # 9. 애플리케이션 배포
    # ================================================
    - name: Docker Compose로 애플리케이션 시작 (Compose v2)
      community.docker.docker_compose_v2:
        project_src: "/opt/{{ project_name }}/app"
        pull: true
        build: true
        state: present
      tags: [deploy]

    # ================================================
    # 10. 헬스체크 스크립트 생성
    # ================================================
    - name: 헬스체크 스크립트 생성
      copy:
        content: |
          #!/bin/bash
          # LifeBit 헬스체크 스크립트
          
          SERVICES=("docker" "nginx" "fail2ban" "node_exporter")
          FAILED_SERVICES=()

          for service in "${SERVICES[@]}"; do
              if ! systemctl is-active --quiet "$service"; then
                  FAILED_SERVICES+=("$service")
              fi
          done

          # Docker 컨테이너 상태 확인
          CONTAINERS=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep -v NAMES)
          if [ -z "$CONTAINERS" ]; then
              echo "WARNING: No running containers found"
          fi

          # 디스크 사용량 확인
          DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
          if [ "$DISK_USAGE" -gt 80 ]; then
              echo "WARNING: Disk usage is ${DISK_USAGE}%"
          fi

          if [ ${#FAILED_SERVICES[@]} -eq 0 ]; then
              echo "OK: All services are running"
              exit 0
          else
              echo "CRITICAL: Failed services: ${FAILED_SERVICES[*]}"
              exit 2
          fi
        dest: "/opt/{{ project_name }}/health-check.sh"
        mode: '0755'
      tags: [monitoring]

    # ================================================
    # 11. Cron 작업 설정
    # ================================================
    - name: Cron 작업 설정
      cron:
        name: "{{ item.name }}"
        minute: "{{ item.minute }}"
        hour: "{{ item.hour | default('*') }}"
        job: "{{ item.job }}"
      loop:
        - name: "LifeBit 헬스체크"
          minute: "*/5"
          job: "/opt/{{ project_name }}/health-check.sh > /dev/null 2>&1"
        - name: "Docker 정리"
          minute: "0"
          hour: "2"
          job: "docker system prune -f > /dev/null 2>&1"
      tags: [monitoring]

    # ================================================
    # 12. 로그 로테이션 설정
    # ================================================
    - name: 로그 로테이션 설정
      copy:
        content: |
          /opt/{{ project_name }}/logs/*.log {
              daily
              missingok
              rotate 30
              compress
              delaycompress
              notifempty
              create 644 root root
              postrotate
                  systemctl reload docker || true
              endscript
          }
        dest: /etc/logrotate.d/lifebit
      tags: [system]

    # ================================================
    # 13. 시스템 정보 수집
    # ================================================
    - name: 시스템 정보 파일 생성
      copy:
        content: |
          === LifeBit 서버 정보 ===
          배포 완료 시간: {{ ansible_date_time.iso8601 }}
          환경: {{ environment }}
          프로젝트: {{ project_name }}
          
          === 시스템 정보 ===
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Kernel: {{ ansible_kernel }}
          CPU: {{ ansible_processor_vcpus }} cores
          Memory: {{ ansible_memtotal_mb }} MB
          
          === 네트워크 정보 ===
          Public IP: {{ ansible_default_ipv4.address }}
          
          === 서비스 포트 ===
          - Frontend: 3000
          - Spring Boot API: 8080
          - FastAPI: 8001
          - Airflow: 8081
          - Nginx Proxy: 8082
          - Grafana: 3001
          - Prometheus: 9090
          - Node Exporter: 9100
        dest: "/opt/{{ project_name }}/system-info.txt"
      tags: [info]

    # ================================================
    # 14. 배포 완료 알림
    # ================================================
    - name: 배포 완료 표시
      file:
        path: "/opt/{{ project_name }}/deployment-complete"
        state: touch
        mode: '0644'
      tags: [deploy]

    - name: 배포 완료 메시지 출력
      debug:
        msg: |
          🎉 LifeBit 배포 완료!
          
          📱 서비스 URLs:
          - 통합 접속 (Nginx): http://{{ ansible_default_ipv4.address }}:8082
          - Frontend: http://{{ ansible_default_ipv4.address }}:3000
          - Spring Boot API: http://{{ ansible_default_ipv4.address }}:8080
          - FastAPI: http://{{ ansible_default_ipv4.address }}:8001
          - Grafana: http://{{ ansible_default_ipv4.address }}:3001
          - Prometheus: http://{{ ansible_default_ipv4.address }}:9090
          
          🔑 SSH 접속:
          ssh -i ~/.ssh/lifebit-{{ environment }}-key.pem root@{{ ansible_default_ipv4.address }}
      tags: [info]

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
    
    - name: restart ssh
      systemd:
        name: ssh
        state: restarted 