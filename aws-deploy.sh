#!/bin/bash

set -e

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Î°úÍ∑∏ Ìï®Ïàò
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Î∞∞ÎÑà Ï∂úÎ†•
echo -e "${BLUE}"
cat << "EOF"
 _      _  __      ____  _ _   
| |    (_)/ _|    |  _ \(_) |  
| |     _| |_ ___ | |_) |_| |_ 
| |    | |  _/ _ \|  _ <| | __|
| |____| | ||  __/| |_) | | |_ 
|______|_|_| \___||____/|_|\__|
                               
AWS Î∞∞Ìè¨ ÏãúÏûë...
EOF
echo -e "${NC}"

# ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
export AWS_REGION="${AWS_REGION:-ap-northeast-2}"
export PROJECT_NAME="${PROJECT_NAME:-lifebit}"
export ENVIRONMENT="${ENVIRONMENT:-production}"
export INSTANCE_TYPE="${INSTANCE_TYPE:-t3.medium}"

log_info "Î∞∞Ìè¨ ÏÑ§Ï†ï:"
log_info "  - AWS Region: $AWS_REGION"
log_info "  - Project Name: $PROJECT_NAME"
log_info "  - Environment: $ENVIRONMENT"
log_info "  - Instance Type: $INSTANCE_TYPE"

# ÌïÑÏàò ÎèÑÍµ¨ ÌôïÏù∏
log_info "ÌïÑÏàò ÎèÑÍµ¨ ÌôïÏù∏ Ï§ë..."

command -v terraform >/dev/null 2>&1 || {
    log_error "TerraformÏù¥ ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. https://terraform.io/downloads ÏóêÏÑú ÏÑ§ÏπòÌï¥Ï£ºÏÑ∏Ïöî."
    exit 1
}

command -v ansible >/dev/null 2>&1 || {
    log_error "AnsibleÏù¥ ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. 'pip install ansible' ÎòêÎäî Ìå®ÌÇ§ÏßÄ Îß§ÎãàÏ†ÄÎ°ú ÏÑ§ÏπòÌï¥Ï£ºÏÑ∏Ïöî."
    exit 1
}

command -v aws >/dev/null 2>&1 || {
    log_error "AWS CLIÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. https://aws.amazon.com/cli/ ÏóêÏÑú ÏÑ§ÏπòÌï¥Ï£ºÏÑ∏Ïöî."
    exit 1
}

log_success "Î™®Îì† ÌïÑÏàò ÎèÑÍµ¨Í∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏäµÎãàÎã§."

# AWS ÏûêÍ≤© Ï¶ùÎ™Ö ÌôïÏù∏
log_info "AWS ÏûêÍ≤© Ï¶ùÎ™Ö ÌôïÏù∏ Ï§ë..."
if ! aws sts get-caller-identity >/dev/null 2>&1; then
    log_error "AWS ÏûêÍ≤© Ï¶ùÎ™ÖÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. 'aws configure'Î•º Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî."
    exit 1
fi

AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
log_success "AWS Í≥ÑÏ†ï ID: $AWS_ACCOUNT_ID"

# SSH ÌÇ§ ÏÉùÏÑ± (Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤ΩÏö∞)
SSH_KEY_PATH="$HOME/.ssh/lifebit_key"
if [ ! -f "$SSH_KEY_PATH" ]; then
    log_info "SSH ÌÇ§ ÏÉùÏÑ± Ï§ë..."
    ssh-keygen -t rsa -b 4096 -f "$SSH_KEY_PATH" -N "" -C "lifebit-deployment-key"
    chmod 600 "$SSH_KEY_PATH"
    chmod 644 "${SSH_KEY_PATH}.pub"
    log_success "SSH ÌÇ§Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§: $SSH_KEY_PATH"
else
    log_info "Í∏∞Ï°¥ SSH ÌÇ§Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§: $SSH_KEY_PATH"
fi

# Terraform ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
cd infrastructure/terraform

# Terraform Ï¥àÍ∏∞Ìôî
log_info "Terraform Ï¥àÍ∏∞Ìôî Ï§ë..."
terraform init

# Terraform Í≥ÑÌöç ÌôïÏù∏
log_info "Terraform Ïã§Ìñâ Í≥ÑÌöç ÌôïÏù∏ Ï§ë..."
terraform plan \
    -var="aws_region=$AWS_REGION" \
    -var="project_name=$PROJECT_NAME" \
    -var="environment=$ENVIRONMENT" \
    -var="instance_type=$INSTANCE_TYPE" \
    -var="public_key_path=${SSH_KEY_PATH}.pub"

# ÏÇ¨Ïö©Ïûê ÌôïÏù∏
echo ""
log_warning "ÏúÑÏùò Terraform Í≥ÑÌöçÏùÑ Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî."
read -p "Í≥ÑÏÜç ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå? (yes/no): " -r
if [[ ! $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then
    log_info "Î∞∞Ìè¨Í∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
    exit 0
fi

# Terraform Ï†ÅÏö©
log_info "AWS Ïù∏ÌîÑÎùº ÏÉùÏÑ± Ï§ë... (ÏïΩ 3-5Î∂Ñ ÏÜåÏöî)"
terraform apply -auto-approve \
    -var="aws_region=$AWS_REGION" \
    -var="project_name=$PROJECT_NAME" \
    -var="environment=$ENVIRONMENT" \
    -var="instance_type=$INSTANCE_TYPE" \
    -var="public_key_path=${SSH_KEY_PATH}.pub"

# ÌçºÎ∏îÎ¶≠ IP Í∞ÄÏ†∏Ïò§Í∏∞
EC2_PUBLIC_IP=$(terraform output -raw instance_public_ip)
INSTANCE_ID=$(terraform output -raw instance_id)

log_success "AWS Ïù∏ÌîÑÎùºÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!"
log_info "EC2 ÌçºÎ∏îÎ¶≠ IP: $EC2_PUBLIC_IP"
log_info "Ïù∏Ïä§ÌÑ¥Ïä§ ID: $INSTANCE_ID"

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏Î°ú ÎèåÏïÑÍ∞ÄÍ∏∞
cd ../..

# SSH Ïó∞Í≤∞ ÎåÄÍ∏∞
log_info "EC2 Ïù∏Ïä§ÌÑ¥Ïä§ Ï¥àÍ∏∞Ìôî ÎåÄÍ∏∞ Ï§ë... (ÏïΩ 3-5Î∂Ñ ÏÜåÏöî)"
for i in {1..60}; do
    if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i "$SSH_KEY_PATH" ubuntu@$EC2_PUBLIC_IP "echo 'SSH Ïó∞Í≤∞ ÏÑ±Í≥µ'" 2>/dev/null; then
        log_success "SSH Ïó∞Í≤∞Ïù¥ ÏÑ±Í≥µÌñàÏäµÎãàÎã§."
        break
    fi
    echo -n "."
    sleep 10
    if [ $i -eq 60 ]; then
        log_error "SSH Ïó∞Í≤∞ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§."
        exit 1
    fi
done

# user_data Ïä§ÌÅ¨Î¶ΩÌä∏ ÏôÑÎ£å ÎåÄÍ∏∞ (Í∞úÏÑ†Îêú Î°úÏßÅ)
log_info "ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å ÎåÄÍ∏∞ Ï§ë... (ÏµúÎåÄ 10Î∂Ñ ÏÜåÏöî)"
max_wait=600  # 10Î∂ÑÏúºÎ°ú Îã®Ï∂ï
elapsed=0
user_data_completed=false

while [ $elapsed -lt $max_wait ]; do
    if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i "$SSH_KEY_PATH" ubuntu@$EC2_PUBLIC_IP "test -f /home/ubuntu/.user-data-completed" 2>/dev/null; then
        log_success "ÏãúÏä§ÌÖú Ï¥àÍ∏∞ÌôîÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§."
        user_data_completed=true
        break
    fi
    echo -n "."
    sleep 20
    elapsed=$((elapsed + 20))
done

if [ "$user_data_completed" = false ]; then
    log_warning "ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å ÌôïÏù∏ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§."
    log_info "unattended-upgrades Î¨∏Ï†úÎ•º ÏàòÎèôÏúºÎ°ú Ìï¥Í≤∞Ìï©ÎãàÎã§..."
    
    # unattended-upgrades Î¨∏Ï†ú Ìï¥Í≤∞
    ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i "$SSH_KEY_PATH" ubuntu@$EC2_PUBLIC_IP "
        sudo systemctl stop unattended-upgrades.service || true
        sudo systemctl disable unattended-upgrades.service || true
        sudo pkill -f unattended-upgrade || true
        sudo apt-get install -y rsync htop vim tree jq || true
        echo 'Manual setup completed'
    " 2>/dev/null || log_warning "ÏàòÎèô ÏÑ§Ï†ïÏóê ÏùºÎ∂Ä Ïã§Ìå®ÌñàÏßÄÎßå Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§."
    
    log_info "Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§..."
fi

# Ansible Ïù∏Î≤§ÌÜ†Î¶¨ ÌååÏùº ÏÉùÏÑ±
log_info "Ansible Ïù∏Î≤§ÌÜ†Î¶¨ ÏÉùÏÑ± Ï§ë..."
cat > infrastructure/ansible/inventory << EOF
[lifebit_servers]
lifebit_server ansible_host=$EC2_PUBLIC_IP ansible_user=ubuntu ansible_ssh_private_key_file=$SSH_KEY_PATH

[lifebit_servers:vars]
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
EOF

# Ansible ÌîåÎ†àÏù¥Î∂Å Ïã§Ìñâ
log_info "AnsibleÎ°ú Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î∞∞Ìè¨ Ï§ë... (ÏïΩ 10-15Î∂Ñ ÏÜåÏöî)"
cd infrastructure/ansible

# Ansible Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
log_info "Ansible Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ï§ë..."
if ! ansible lifebit_servers -m ping; then
    log_error "Ansible Ïó∞Í≤∞ ÌÖåÏä§Ìä∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."
    exit 1
fi

# ÌîåÎ†àÏù¥Î∂Å Ïã§Ìñâ (Ïû¨ÏãúÎèÑ Î°úÏßÅ Ìè¨Ìï®)
log_info "Ansible ÌîåÎ†àÏù¥Î∂Å Ïã§Ìñâ Ï§ë..."
max_retries=3
retry_count=0

while [ $retry_count -lt $max_retries ]; do
    log_info "ÌîåÎ†àÏù¥Î∂Å Ïã§Ìñâ ÏãúÎèÑ $(($retry_count + 1))/$max_retries..."
    
    if ansible-playbook playbook.yml; then
        log_success "Ansible ÌîåÎ†àÏù¥Î∂ÅÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§."
        break
    else
        retry_count=$(($retry_count + 1))
        if [ $retry_count -lt $max_retries ]; then
            log_warning "ÌîåÎ†àÏù¥Î∂Å Ïã§ÌñâÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. 30Ï¥à ÌõÑ Ïû¨ÏãúÎèÑÌï©ÎãàÎã§..."
            sleep 30
        else
            log_error "ÌîåÎ†àÏù¥Î∂Å Ïã§ÌñâÏóê $max_retries Î≤à Ïã§Ìå®ÌñàÏäµÎãàÎã§."
            log_error "ÏàòÎèôÏúºÎ°ú Îã§Ïùå Î™ÖÎ†πÏùÑ Ïã§ÌñâÌï¥Î≥¥ÏÑ∏Ïöî:"
            log_error "  cd infrastructure/ansible"
            log_error "  ansible-playbook playbook.yml -vvv"
            exit 1
        fi
    fi
done

cd ../..

# Î∞∞Ìè¨ Ï†ïÎ≥¥ Ï†ÄÏû•
log_info "Î∞∞Ìè¨ Ï†ïÎ≥¥ Ï†ÄÏû• Ï§ë..."
cat > .deployment_info << EOF
# LifeBit AWS Î∞∞Ìè¨ Ï†ïÎ≥¥
DEPLOYMENT_DATE=$(date)
AWS_REGION=$AWS_REGION
PROJECT_NAME=$PROJECT_NAME
ENVIRONMENT=$ENVIRONMENT
EC2_PUBLIC_IP=$EC2_PUBLIC_IP
INSTANCE_ID=$INSTANCE_ID
INSTANCE_TYPE=$INSTANCE_TYPE

# Ï†ëÏÜç URL
FRONTEND_URL=http://$EC2_PUBLIC_IP:3000
CORE_API_URL=http://$EC2_PUBLIC_IP:8080
AI_API_URL=http://$EC2_PUBLIC_IP:8001
NGINX_URL=http://$EC2_PUBLIC_IP

# SSH Ï†ëÏÜç
SSH_COMMAND="ssh -i $SSH_KEY_PATH ubuntu@$EC2_PUBLIC_IP"
EOF

# Î∞∞Ìè¨ ÏôÑÎ£å Î©îÏãúÏßÄ
echo ""
log_success "üéâ LifeBit AWS Î∞∞Ìè¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"
echo ""
echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${GREEN}         Î∞∞Ìè¨ ÏôÑÎ£å Ï†ïÎ≥¥${NC}"
echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${BLUE}üì± ÌîÑÎ°†Ìä∏ÏóîÎìú:${NC}     http://$EC2_PUBLIC_IP:3000"
echo -e "${BLUE}üîß Core API:${NC}      http://$EC2_PUBLIC_IP:8080"
echo -e "${BLUE}ü§ñ AI API:${NC}        http://$EC2_PUBLIC_IP:8001"
echo -e "${BLUE}üåê Nginx (ÌÜµÌï©):${NC}  http://$EC2_PUBLIC_IP"
echo ""
echo -e "${BLUE}üîë SSH Ï†ëÏÜç:${NC}"
echo -e "   ssh -i $SSH_KEY_PATH ubuntu@$EC2_PUBLIC_IP"
echo ""
echo -e "${BLUE}üìä Î™®ÎãàÌÑ∞ÎßÅ:${NC}"
echo -e "   Health Check: http://$EC2_PUBLIC_IP:8080/actuator/health"
echo -e "   Container Status: docker ps"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Ï£ºÏùòÏÇ¨Ìï≠:${NC}"
echo -e "   - ÏÑúÎπÑÏä§Í∞Ä ÏôÑÏ†ÑÌûà ÏãúÏûëÎêòÍ∏∞ÍπåÏßÄ 2-3Î∂Ñ Ï†ïÎèÑ Îçî ÏÜåÏöîÎê† Ïàò ÏûàÏäµÎãàÎã§."
echo -e "   - Î∞∞Ìè¨ Ï†ïÎ≥¥Îäî .deployment_info ÌååÏùºÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§."
echo -e "   - Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨Îäî './aws-destroy.sh'Î•º Ïã§ÌñâÌïòÏÑ∏Ïöî."
echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

log_success "Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§ÌñâÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!" 