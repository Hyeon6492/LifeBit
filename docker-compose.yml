version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres-db:
    image: postgres:16
    container_name: lifebit_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=lifebit_db
      - POSTGRES_USER=lifebit_user
      - POSTGRES_PASSWORD=lifebit_password
    ports:
      - "5432:5432"
    restart: always
    networks:
      - lifebit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lifebit_user -d lifebit_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI 애플리케이션
  fastapi-app:
    build:
      context: ./apps/ai-api-fastapi
      dockerfile: Dockerfile
    container_name: lifebit_fastapi
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://lifebit_user:lifebit_password@postgres-db:5432/lifebit_db
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - USE_GPT=${USE_GPT:-False}
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://localhost
    ports:
      - "8001:8001"
    restart: always
    networks:
      - lifebit-network
    volumes:
      - ./apps/ai-api-fastapi/.env:/app/.env

  # Spring Boot 애플리케이션
  spring-app:
    build:
      context: ./apps/core-api-spring
      dockerfile: Dockerfile
    container_name: lifebit_spring
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/lifebit_db?stringtype=unspecified
      - SPRING_DATASOURCE_USERNAME=lifebit_user
      - SPRING_DATASOURCE_PASSWORD=lifebit_password
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_ENDPOINTS_WEB_CORS_ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000,http://localhost
    ports:
      - "8080:8080"
    restart: always
    networks:
      - lifebit-network

  # Vite React 프론트엔드
  frontend-app:
    build:
      context: ./apps/frontend-vite
      dockerfile: Dockerfile
    container_name: lifebit_frontend
    depends_on:
      - fastapi-app
      - spring-app
    ports:
      - "3000:80"
    restart: always
    networks:
      - lifebit-network

  # Airflow 웹서버
  airflow-webserver:
    build:
      context: ./apps/airflow-pipeline
      dockerfile: Dockerfile
    container_name: lifebit_airflow_webserver
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://lifebit_user:lifebit_password@postgres-db:5432/lifebit_db
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key-here-32-characters
      - AIRFLOW__WEBSERVER__SECRET_KEY=your-secret-key-here
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
    ports:
      - "8081:8080"
    restart: always
    networks:
      - lifebit-network
    volumes:
      - ./apps/airflow-pipeline/dags:/opt/airflow/dags
      - ./apps/airflow-pipeline/logs:/opt/airflow/logs
      - airflow_data:/opt/airflow
    command: >
      bash -c "
        sleep 30 &&
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || echo 'User already exists' &&
        airflow webserver
      "

  # Airflow 스케줄러
  airflow-scheduler:
    build:
      context: ./apps/airflow-pipeline
      dockerfile: Dockerfile
    container_name: lifebit_airflow_scheduler
    depends_on:
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://lifebit_user:lifebit_password@postgres-db:5432/lifebit_db
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key-here-32-characters
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    restart: always
    networks:
      - lifebit-network
    volumes:
      - ./apps/airflow-pipeline/dags:/opt/airflow/dags
      - ./apps/airflow-pipeline/logs:/opt/airflow/logs
      - airflow_data:/opt/airflow
    command: airflow scheduler

  # Nginx 리버스 프록시
  nginx-proxy:
    image: nginx:alpine
    container_name: lifebit_nginx
    depends_on:
      - frontend-app
      - fastapi-app
      - spring-app
      - airflow-webserver
    ports:
      - "80:80"
      - "443:443"
    restart: always
    networks:
      - lifebit-network
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl  # SSL 인증서용 (옵션)
    command: ["nginx", "-g", "daemon off;"]

networks:
  lifebit-network:
    driver: bridge

volumes:
  postgres_data:
  airflow_data: