# ===============================================================
# LifeBit 프로젝트 환경변수 설정 예시
# ===============================================================
# 이 파일을 `.env`로 복사하여 실제 값으로 수정하세요.
# 각 서비스별 .env 파일도 별도로 설정해야 합니다.

# ===============================================================
# 🌐 도메인 및 배포 설정
# ===============================================================

# 메인 도메인 (사용자 정의 도메인 사용 시)
# 예시: lifebit.com, my.lifebit.com, demo.example.com
# 비워두면 EC2 Public IP를 사용합니다
DOMAIN_NAME=

# 환경 구분 (development, staging, production)
NODE_ENV=production
ENVIRONMENT=production

# AWS 배포 설정
AWS_REGION=ap-northeast-2
PROJECT_NAME=lifebit
INSTANCE_TYPE=t3.medium

# ===============================================================
# 🔐 보안 및 인증 설정
# ===============================================================

# JWT 시크릿 키 (모든 서비스에서 동일하게 사용)
# 32자 이상의 랜덤 문자열을 사용하세요
JWT_SECRET=your-super-secret-jwt-key-here-32-chars-minimum
JWT_ALGORITHM=HS256

# ===============================================================
# 🗄️ 데이터베이스 설정
# ===============================================================

# PostgreSQL 데이터베이스 설정
POSTGRES_DB=lifebit_db
POSTGRES_USER=lifebit_user
POSTGRES_PASSWORD=your-strong-database-password-here

# 데이터베이스 URL (자동 생성되지만 수동 설정도 가능)
DATABASE_URL=postgresql://lifebit_user:your-password@localhost:5432/lifebit_db

# ===============================================================
# 🤖 AI 서비스 설정
# ===============================================================

# OpenAI API 설정
OPENAI_API_KEY=sk-your-openai-api-key-here
USE_GPT=false

# AI API 서버 설정
AI_API_HOST=0.0.0.0
AI_API_PORT=8001

# ===============================================================
# 🔑 소셜 로그인 설정
# ===============================================================

# Google OAuth 설정
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret

# Kakao OAuth 설정
KAKAO_CLIENT_ID=your-kakao-client-id
KAKAO_CLIENT_SECRET=your-kakao-client-secret

# 소셜 로그인 리다이렉트 URI (도메인에 따라 자동 설정됨)
# 수동 설정 시에만 사용
GOOGLE_REDIRECT_URI=
KAKAO_REDIRECT_URI=

# ===============================================================
# 🌐 CORS 및 네트워크 설정
# ===============================================================

# CORS 허용 도메인 (도메인에 따라 자동 설정됨)
# 수동 설정 시에만 사용
CORS_ORIGINS=
CORS_ALLOWED_ORIGINS=

# 서버 포트 설정
CORE_API_PORT=8080
FRONTEND_PORT=3000
NGINX_PORT=80

# ===============================================================
# 📊 로깅 및 모니터링 설정
# ===============================================================

# 로그 레벨 (debug, info, warn, error)
LOG_LEVEL=info

# Spring Boot 로깅 설정
SPRING_PROFILES_ACTIVE=production

# ===============================================================
# 🔧 개발 환경 설정 (로컬 개발용)
# ===============================================================

# 로컬 개발 시 사용할 API URL
VITE_CORE_API_URL=http://localhost:8080
VITE_AI_API_URL=http://localhost:8001

# 프론트엔드 환경변수
VITE_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
VITE_KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
VITE_JWT_SECRET_KEY=${JWT_SECRET}
VITE_OPENAI_API_KEY=${OPENAI_API_KEY}

# ===============================================================
# 📝 설정 가이드 및 참고사항
# ===============================================================

# 1. 도메인 설정 방법:
#    - DOMAIN_NAME에 원하는 도메인 입력 (예: lifebit.com)
#    - 도메인 등록업체에서 A 레코드를 EC2 IP로 설정
#    - 배포 후 SSL 인증서 자동 발급됨

# 2. 소셜 로그인 설정:
#    - Google: https://console.cloud.google.com
#    - Kakao: https://developers.kakao.com
#    - 각 플랫폼에서 리다이렉트 URI를 도메인에 맞게 설정

# 3. 보안 주의사항:
#    - JWT_SECRET은 절대 공유하지 마세요
#    - 데이터베이스 비밀번호는 강력하게 설정하세요
#    - API 키는 .env 파일에만 저장하고 Git에 커밋하지 마세요

# 4. 배포 방법:
#    - 로컬: docker-compose -f docker-compose.local.yml up
#    - 프로덕션: ./aws-deploy.sh 실행 후 도메인 입력

# 5. 환경별 설정:
#    - 개발: apps/*/env.example 파일들도 각각 설정 필요
#    - 프로덕션: 배포 시 자동으로 .env 파일 생성됨

# ===============================================================
# 🚀 빠른 시작 가이드
# ===============================================================

# 1. 이 파일을 .env로 복사:
#    cp .env.example .env

# 2. 필수 값들 설정:
#    - JWT_SECRET (랜덤 문자열)
#    - POSTGRES_PASSWORD (강력한 비밀번호)
#    - 소셜 로그인 키들 (필요시)

# 3. 로컬 개발 시작:
#    docker-compose -f docker-compose.local.yml up

# 4. AWS 배포:
#    ./aws-deploy.sh

# ===============================================================
# 📞 문의 및 지원
# ===============================================================

# 문제 발생 시:
# - 문서: docs/ 폴더의 가이드 참조
# - 테스트: ./scripts/test-domain-setup.sh [도메인] 실행
# - 로그: docker-compose logs [서비스명]

# 주요 문서:
# - docs/설치 방법.md
# - docs/도메인 및 SSL 설정 가이드.md
# - docs/배포 가이드.md 